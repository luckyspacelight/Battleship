type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/ShipsHandler.java
  visible: true
  text: |
    package battleship;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class ShipsHandler {

        private Ship ship01;
        private Ship ship02;
        private Ship ship03;
        private Ship ship04;
        private Ship ship05;
        private Ship[] ships;

        enum ShipNames {

            AIRCRAFT_CARRIER(1, "Aircraft Carrier", 5),
            BATTLESHIP(2, "Battleship", 4),
            SUBMARINE(3, "Submarine", 3),
            CRUISER(4, "Cruiser", 3),
            DESTROYER(5, "Destroyer", 2);

            int ordinal;
            String name;
            int cellsNum;

            ShipNames(int ordinal, String name, int cellsNum) {
                this.ordinal = ordinal;
                this.name = name;
                this.cellsNum = cellsNum;
            }
        }

        public ShipsHandler() {
            this.ship01 = new Ship(ShipNames.AIRCRAFT_CARRIER.name, ShipNames.AIRCRAFT_CARRIER.cellsNum);
            this.ship02 = new Ship(ShipNames.BATTLESHIP.name, ShipNames.BATTLESHIP.cellsNum);
            this.ship03 = new Ship(ShipNames.SUBMARINE.name, ShipNames.SUBMARINE.cellsNum);
            this.ship04 = new Ship(ShipNames.CRUISER.name, ShipNames.CRUISER.cellsNum);
            this.ship05 = new Ship(ShipNames.DESTROYER.name, ShipNames.DESTROYER.cellsNum);

            ships = new Ship[5];
            ships[0] = ship01;
            ships[1] = ship02;
            ships[2] = ship03;
            ships[3] = ship04;
            ships[4] = ship05;

        }


        public Ship getShip01() {
            return ship01;
        }

        public void setShip01(Ship ship01) {
            this.ship01 = ship01;
        }

        public Ship getShip02() {
            return ship02;
        }

        public void setShip02(Ship ship02) {
            this.ship02 = ship02;
        }

        public Ship getShip03() {
            return ship03;
        }

        public void setShip03(Ship ship03) {
            this.ship03 = ship03;
        }

        public Ship getShip04() {
            return ship04;
        }

        public void setShip04(Ship ship04) {
            this.ship04 = ship04;
        }

        public Ship getShip05() {
            return ship05;
        }

        public void setShip05(Ship ship05) {
            this.ship05 = ship05;
        }

        public Ship[] getShips() {
            return ships;
        }

        @Override
        public String toString() {
            String ships = ship01.getName() + "\n";
            ships += ship02.getName() + "\n";
            ships += ship03.getName() + "\n";
            ships += ship04.getName() + "\n";
            ships += ship05.getName() + "\n";
            return ships;
        }

        public void setupShips(GameField gf) {
            for (Ship ship : ships) {
                ship.placeShip(gf);
            }
        }

    }
  learner_created: true
- name: src/battleship/Helper.java
  visible: true
  text: |
    package battleship;

    public class Helper {

        public static int countDigits(int num1, int num2) {
            int count = 0;
            for (int i = num1; i <= num2; i++) {
                count ++;
            }
            return count;
        }


        public static boolean checkErrors(int rowFC, int colFC, int rowTC, int colTC, Ship ship, GameField gf) {

            boolean noError = true;
            boolean isCloseToAShip = false;
            int cellsNumDigited = 0;


            if (rowFC == rowTC) {
                cellsNumDigited = countDigits(Math.min(colFC, colTC), Math.max(colFC, colTC));
            } else if (colFC == colTC) {
                cellsNumDigited = countDigits(Math.min(rowFC, rowTC), Math.max(rowFC, rowTC));
            }

            try {

                if (rowFC > 9 || colFC > 9 || rowTC > 9 || colTC > 9) {
                    noError = false;
                    throw new IllegalArgumentException("Error! Out of the 10x10 field. Try again:");
                }

                if (rowFC != rowTC && colFC != colTC) {
                    noError = false;
                    throw new IllegalArgumentException("Error! Wrong ship location! Try again:");
                }

                if (cellsNumDigited != ship.getCellsNumber()) {
                    noError = false;
                    throw new IllegalArgumentException("Error! Wrong length of the " + ship.getName() + ". Try again:");
                }

                isCloseToAShip = checkThePosition(rowFC, colFC, rowTC, colTC, gf, isCloseToAShip);

                if (isCloseToAShip) {
                    noError = false;
                    throw new IllegalArgumentException("Error! You placed it too close to another one. Try again:");
                }


            } catch (IllegalArgumentException e) {
                System.out.printf("%n%s%n ", e.getMessage());
            } finally {
                return noError;
            }
        }


        public static boolean checkError(int row, int col) {

            boolean noError = true;

            try {
                if (row > 9 || col > 9 || row < 0 || col < 0) {
                    noError = false;
                    throw new IllegalArgumentException("Error! You entered the wrong coordinates! Try again:");
                }
            } catch (IllegalArgumentException e) {
                System.out.printf("%n%s%n%n", e.getMessage());
            } finally {
                return noError;
            }
        }

        public static boolean checkThePosition(int rowFC, int colFC, int rowTC, int colTC,
                                               GameField gf, boolean isCloseToAShip) {

            String[][] arGameField = gf.getArGameField();

            if(rowFC == rowTC) {
                for (int i = Math.min(colFC, colTC); i <= Math.max(colFC, colTC); i++) {
                    int col = i;
                    int row = rowFC;

                    if (arGameField[row][col].equals("O")) {
                        isCloseToAShip = true;
                        break;
                    }

                    if (arGameField[row][col = col == 9 ? 9 : col + 1].equals("O")) {
                        isCloseToAShip = true;
                        break;
                    }

                    col = i;
                    if (arGameField[row][col = col == 0 ? 0 : col - 1].equals("O")) {
                        isCloseToAShip = true;
                        break;
                    }

                    col = i;
                    if (arGameField[row = row == 9 ? 9 : row + 1][col].equals("O")) {
                        isCloseToAShip = true;
                        break;
                    }

                    row = rowFC;
                    if (arGameField[row = row == 0 ? 0 : row - 1][col].equals("O")) {
                        isCloseToAShip = true;
                        break;
                    }
                }
            } else if (colFC == colTC) {
                for (int i = Math.min(rowFC, rowTC); i <= Math.max(rowFC, rowTC); i++) {
                    int row = i;
                    int col = colFC;

                    if (arGameField[i][col].equals("O")) {
                        isCloseToAShip = true;
                        break;
                    }

                    if (arGameField[row][col = col == 9 ? 9 : col + 1].equals("O")) {
                        isCloseToAShip = true;
                        break;
                    }

                    col = colFC;
                    if (arGameField[row][col = col == 0 ? 0 : col - 1].equals("O")) {
                        isCloseToAShip = true;
                        break;
                    }

                    col = colFC;
                    if (arGameField[row = row == 9 ? 9 : row + 1][col].equals("O")) {
                        isCloseToAShip = true;
                        break;
                    }

                    row = i;
                    if (arGameField[row = row == 0 ? 0 : row - 1][col].equals("O")) {
                        isCloseToAShip = true;
                        break;
                    }
                }
            }
            return isCloseToAShip;
        }
    }
  learner_created: true
- name: src/battleship/GameHandler.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;

    public class GameHandler {

        public void startTheGame(GameField gf) {
            System.out.println("The game starts!\n");
            gf.showGameField(false, true);
            System.out.println();
        }

        public void takeAShot(GameField gf, ShipsHandler sh) {

            boolean noError = true;
            boolean unsunkShips = true;
            boolean shipIsSunk = false;
            String theShot = "";

            int rowShot = 0;
            int colShot = 0;

            Scanner scanner = new Scanner(System.in);
            System.out.println("Take a shot!\n");

            while (unsunkShips) {

                do {
                    // Input shot coordinate
                    theShot = scanner.nextLine().toUpperCase();

                    // Shot coordinate
                    rowShot = theShot.substring(0,1).charAt(0) - 65;
                    colShot = Integer.parseInt(theShot.substring(1)) - 1;

                    // Check errors
                    noError = Helper.checkError(rowShot, colShot);

                } while (noError == false);

                if (noError) {
                    // Update Game Field
                    boolean isTheShipHit = gf.updateFieldAfterShot(rowShot, colShot);

                    // Update the ship coordinate
                    if (isTheShipHit) {
                        for (Ship ship : sh.getShips()) {
                            String[][] arTest = ship.getLocationCells();
                            for (int i = 0; i < arTest.length; i++) {
                                if (theShot.equals(arTest[i][0])) {
                                    arTest[i][1] = "X";
                                }
                            }
                        }
                    }

                    // Show the Game Field
                    System.out.println();
                    gf.showGameField(false, true);

                    /* TODO Inserire il controllo di affondamento di una nave */
                    if (isTheShipHit) {

                        // Check if a ship is sunk
                        for (Ship ship : sh.getShips()) {
                            if (!ship.isSunk()){
                                for (int i = 0; i < ship.getLocationCells().length; i++) {
                                    ship.setSunk(true);
                                    if (ship.getLocationCells()[i][1].equals("O")) {
                                        ship.setSunk(false);
                                        break;
                                    }
                                }

                                //Ship sunk!
                                if (ship.isSunk()) {
                                    shipIsSunk = true;
                                    break;
                                }
                            }
                        }

                        // I check if all ships are sunk
                        if (shipIsSunk) {
                            unsunkShips = false;
                            for (Ship ship : sh.getShips()) {
                                if (ship.isSunk() == false) {
                                    unsunkShips = true;
                                    break;
                                }
                            }
                        }

                        if (shipIsSunk) {
                            if (unsunkShips == false) {
                                System.out.println("\nYou sank the last ship. You won. Congratulations!");
                            } else {
                                System.out.println("\nYou sank a ship! Specify a new target:\n");
                                shipIsSunk = false;
                            }
                        } else {
                            System.out.println("\nYou hit a ship! Try again:\n");
                        }
                    } else {
                        System.out.println("\nYou missed! Try again:\n");
                    }
                }
            }

        }
    }
  learner_created: true
- name: src/battleship/GameField.java
  visible: true
  text: |
    package battleship;

    public class GameField {

        private int rows;
        private int columns;
        private boolean gridHdFc;
        private String[][] arGameField;

        private final static String YOU_MISSED = "M";
        private final static String YOU_HIT_A_SHIP = "X";

        public GameField(int rows, int columns, boolean gridHdFc)  {
            this.rows = rows;
            this.columns = columns;
            this.gridHdFc = gridHdFc;
            this.arGameField = new String[rows][columns];
        }

        public int getRows() {
            return rows;
        }

        public int getColumns() {
            return columns;
        }

        public String[][] getArGameField() {
            return arGameField;
        }

        public void showGameField(boolean isSetup, boolean isFogOfWar) {

            // Print header (first row)
            if (gridHdFc) {
                String hd = "";
                final int cols = this.getColumns();
                for (int i = 0; i <= cols; i++) {
                    if (i == 0) {
                        hd = " ";
                    } else if (i == cols) {
                        hd = " %d%n";
                    } else {
                        hd = " %d";
                    }
                    System.out.printf(hd, i);
                }
            }

            // Print game field
            int A = 65;
            for (int i = 0; i < arGameField.length; i++) {
                for (int j = 0; j < arGameField[i].length; j++) {

                    // Print first column
                    if (j == 0 && gridHdFc) {
                        System.out.printf("%c ".toUpperCase(), 'a' + i);
                    }

                    // Useful for setup
                    arGameField[i][j] = isSetup == true ? "~" : arGameField[i][j];

                    // Useful for the "fog of war" option (true)
                    if (isFogOfWar) {
                        System.out.printf("%s ", arGameField[i][j].replace('O', '~'));
                    } else {
                        System.out.printf("%s ", arGameField[i][j]);
                    }

                }
                System.out.printf("%n");
            }

        }

        public void updateGameField(int rowFC, int colFC, int rowTC, int colTC){
            if (rowFC == rowTC) {
                for (int i = Math.min(colFC, colTC); i <= Math.max(colFC, colTC); i++) {
                    arGameField[rowFC][i] = "O";
                }
            } else if (colFC == colTC) {
                for (int i = Math.min(rowFC, rowTC); i <= Math.max(rowFC, rowTC); i++) {
                    arGameField[i][colFC] = "O";
                }
            }
        }

        public boolean updateFieldAfterShot(int row, int col){
            boolean isHit = false;
            if (arGameField[row][col].equals("O") || arGameField[row][col].equals("X")) {
                arGameField[row][col] = YOU_HIT_A_SHIP;
                isHit = true;
            } else {
                arGameField[row][col] = YOU_MISSED;
            }
            return isHit;
        }

    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;

    public class Ship {

        private String name;
        private int cellsNumber;
        private String[][] locationCells;
        private boolean isSunk;

        public Ship(String name, int cellsNumber) {
            this.name = name;
            this.cellsNumber = cellsNumber;
            this.locationCells = new String[cellsNumber][2];
            isSunk = false;
        }

        public String[][] getLocationCells() {
            return locationCells;
        }

        public void setLocationCells(String[][] locationCells) {
            this.locationCells = locationCells;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getCellsNumber() {
            return cellsNumber;

        }

        public void setCellsNumber(int cellsNumber) {
            this.cellsNumber = cellsNumber;
        }

        public void setSunk(boolean sunk) {
            isSunk = sunk;
        }

        public boolean isSunk() {
            return isSunk;
        }

        public void placeShip(GameField gf) {

            Scanner scanner = new Scanner(System.in);
            String startString = "Enter the coordinates of the";
            System.out.printf("%s %s (%d cells):%n", startString, this.getName(), this.getCellsNumber());

            boolean noError = true;

            String fromCell = "";
            String toCell = "";

            String rowFCstr = "";
            String colFCstr = "";
            String rowTCstr = "";
            String colTCstr = "";

            int rowFC = 0;
            int colFC = 0;
            int rowTC = 0;
            int colTC = 0;

            do {
                fromCell = scanner.next().toUpperCase();
                toCell = scanner.next().toUpperCase();

                // First coordinate (from Cell)
                rowFCstr = fromCell.substring(0,1);
                colFCstr = fromCell.substring(1);
                rowFC = fromCell.substring(0,1).charAt(0) - 65;
                colFC = Integer.parseInt(fromCell.substring(1)) - 1;

                // Second coordinate (to Cell)
                rowTCstr = toCell.substring(0,1);
                colTCstr = toCell.substring(1);
                rowTC = toCell.substring(0,1).charAt(0) - 65;
                colTC = Integer.parseInt(toCell.substring(1)) - 1;

                // Check errors
                noError = Helper.checkErrors(rowFC, colFC, rowTC, colTC, this, gf);

            } while (noError == false);


            if (noError) {

                // Insert ship cells in the ship location array
                if(rowFCstr.equals(rowTCstr)) {  // Horizontal ship
                    for (int i = Math.min(colFC, colTC), j = 0; i <= Math.max(colFC, colTC) && j < locationCells.length; i++, j++) {
                        locationCells[j][0] = rowFCstr + (i + 1);
                        locationCells[j][1] = "O";
                    }
                } else if (colFC == colTC) {   // Vertical ship
                    for (int i = Math.min(rowFC, rowTC), j = 0; i <= Math.max(rowFC, rowTC) && j < locationCells.length; i++, j++) {
                        locationCells[j][0] = (char) (rowFC + 65) + colFCstr;
                        locationCells[j][1] = "O";
                    }
                }

                // Update Game Field
                gf.updateGameField(rowFC, colFC, rowTC, colTC);

                // Show the Game Field
                System.out.println();
                gf.showGameField(false, false);
                System.out.println();
            }
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10598#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Fri, 10 Feb 2023 23:48:16 UTC"
record: -1
